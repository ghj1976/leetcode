package isValidSudoku

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var tcs = []struct {
	N1  [][]byte
	ans bool
}{
	{
		[][]byte{
			[]byte{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
			[]byte{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
			[]byte{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			[]byte{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			[]byte{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			[]byte{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			[]byte{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			[]byte{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			[]byte{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		},
		true,
	},
	{
		[][]byte{
			[]byte{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
			[]byte{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
			[]byte{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
			[]byte{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
			[]byte{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
			[]byte{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
			[]byte{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
			[]byte{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
			[]byte{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
		},
		false,
	},
	{
		[][]byte{
			[]byte{'.', '.', '.', '.', '5', '.', '.', '1', '.'},
			[]byte{'.', '4', '.', '3', '.', '.', '.', '.', '.'},
			[]byte{'.', '.', '.', '.', '.', '3', '.', '.', '1'},
			[]byte{'8', '.', '.', '.', '.', '.', '.', '2', '.'},
			[]byte{'.', '.', '2', '.', '7', '.', '.', '.', '.'},
			[]byte{'.', '1', '5', '.', '.', '.', '.', '.', '.'},
			[]byte{'.', '.', '.', '.', '.', '2', '.', '.', '.'},
			[]byte{'.', '2', '.', '9', '.', '.', '.', '.', '.'},
			[]byte{'.', '.', '4', '.', '.', '.', '.', '.', '.'},
		},
		false,
	},
}

func Test_bitwiseComplement(t *testing.T) {
	ast := assert.New(t)
	for _, tc := range tcs {
		ast.Equal(tc.ans, isValidSudoku(tc.N1), "输入:%v", tc)
	}
}
