package searchBST

import (
	"testing"

	"github.com/pengliheng/leetcode/Helper"

	"github.com/stretchr/testify/assert"
)

var tcs = []struct {
	N1  *TreeNode
	N2  int
	ans *TreeNode
}{
	{
		Helper.Ints2TreeNode([]int{4, 2, 7, 1, 3}),
		2,
		Helper.Ints2TreeNode([]int{2, 1, 3}),
	},
	// {
	// 	Helper.Ints2TreeNode([]int{9980, 9740, -1 << 63, 9680, -1 << 63, 9355, -1 << 63, 9309, -1 << 63, 8473, -1 << 63, 8397, -1 << 63, 8391, -1 << 63, 8326, -1 << 63, 8188, -1 << 63, 7999, -1 << 63, 7950, -1 << 63, 7846, -1 << 63, 7574, -1 << 63, 7569, -1 << 63, 7386, -1 << 63, 7188, -1 << 63, 7039, -1 << 63, 6723, -1 << 63, 6706, -1 << 63, 6623, -1 << 63, 6612, -1 << 63, 6480, -1 << 63, 6469, -1 << 63, 6454, -1 << 63, 6328, -1 << 63, 6286, -1 << 63, 6276, -1 << 63, 5989, -1 << 63, 5928, -1 << 63, 5924, -1 << 63, 5903, -1 << 63, 5837, -1 << 63, 5635, -1 << 63, 5596, -1 << 63, 5550, -1 << 63, 5495, -1 << 63, 5465, -1 << 63, 5109, -1 << 63, 4962, -1 << 63, 4687, -1 << 63, 4598, -1 << 63, 4570, -1 << 63, 4529, -1 << 63, 4426, -1 << 63, 4294, -1 << 63, 4261, -1 << 63, 4180, -1 << 63, 4113, -1 << 63, 4106, -1 << 63, 4042, -1 << 63, 4023, -1 << 63, 4020, -1 << 63, 3998, -1 << 63, 3864, -1 << 63, 3863, -1 << 63, 3841, -1 << 63, 3822, -1 << 63, 3700, -1 << 63, 3613, -1 << 63, 3599, -1 << 63, 3598, -1 << 63, 3561, -1 << 63, 3434, -1 << 63, 3365, -1 << 63, 3318, -1 << 63, 3209, -1 << 63, 3075, -1 << 63, 2999, -1 << 63, 2876, -1 << 63, 2857, -1 << 63, 2672, -1 << 63, 2538, -1 << 63, 2518, -1 << 63, 2338, -1 << 63, 2293, -1 << 63, 2265, -1 << 63, 2175, -1 << 63, 2165, -1 << 63, 1915, -1 << 63, 1579, -1 << 63, 1512, -1 << 63, 1499, -1 << 63, 1404, -1 << 63, 1337, -1 << 63, 1323, -1 << 63, 975, -1 << 63, 800, -1 << 63, 766, -1 << 63, 671, -1 << 63, 566, -1 << 63, 555, -1 << 63, 501, -1 << 63, 343, -1 << 63, 279, -1 << 63, 236, -1 << 63, 175, -1 << 63, 117, -1 << 63, 60, -1 << 63, 19, -1 << 63, -1 << 63, -1 << 63}),
	// 	1404,
	// 	Helper.Ints2TreeNode([]int{2, 1, 3}),
	// },
}

func Test_bitwiseComplement(t *testing.T) {
	ast := assert.New(t)
	for _, tc := range tcs {
		ast.Equal(tc.ans, searchBST(tc.N1, tc.N2), "输入:%v", tc)
	}
}
